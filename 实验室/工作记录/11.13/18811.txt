// 服务端类
    class TestServer : public LThread
    {
    public:
        int bytes;
        ServerUdpSocket m_sv;
        void run() override
        {
            m_sv.createSever(LAbstractSocket::IPv4Protocol); // 创建服务端
            // 作为服务端，需要绑定地址来接收数据
            if (m_sv.bindAddress("127.0.0.1", 40600))
            {
                LThread::msleep(50);
                cout << "server is receiving" << endl;
                bytes = m_sv.m_server->receives(); // 获取接收的字节数
                cout << "get_adress: " << m_sv.m_server->peerAddress().getAddress() << ":" << m_sv.m_server->peerPort() << endl;
            }
            m_sv.close(); // 关闭套接字
        }
        void handleTimerEvent(LTimerEvent *e)
        {
            LApplication::quit();
        }
    };
    // 客户端类
    class TestClient : public LThread
    {
    public:
        bool flag;
        ClientUdpSocket m_cl;
        void run() override
        {
            m_cl.createClient(LAbstractSocket::IPv4Protocol); // 创建客户端
            // 设置对方的地址和ip
            LString ip = "127.0.0.1";
            m_cl.m_client->setPeerAddress(new LHostAddress(ip));
            m_cl.m_client->setPeerPort(40600);
            // 向服务端发送信息
            char data[100] = "length=0";
            cout << "client starts sending!!!!" << endl;
            flag = m_cl.m_client->sends(data, 0); // 数据长度=0
            cout << "client starts closing!!!! -- " << flag << endl;
            m_cl.close(); // 关闭套接字
        }
    };

    LApplication app;
    // 启动服务端
    TestServer server;
    server.start();
    LThread::msleep(30);
    // 启动客户端
    TestClient client1;
    client1.start();
    // 定时退出程序
    LTimer time(&server);
    time.start(1000);
    app.exec();

    // 验证数据收发成功
    EXPECT_EQ(server.bytes, 0);
    EXPECT_EQ(client1.flag, true);
    LThread::msleep(100);

--------------------------------------------------------------------------------
class ServerUdpSocket
{
public:
    LUdpSocket *m_server;
    LString m_msg;
    void createSever(LAbstractSocket::NetworkProtocol network, int buffer = 1024)
    {
        m_server = new LUdpSocket(network);
        m_server->setBufferSize(buffer);
    }
    bool bindAddress(LString ip, int port)
    {
        // 绑定服务端的套接字地址
        bool bind = m_server->binds(new LHostAddress(ip), port);
        cout << "server_bind: " << bind << endl;
        if (bind == false)
        {
            cout << "server failed to bind address!" << endl;
        }
        return bind;
    }
    LString receiveClient()
    {
        // 接收客户端的数据
        int rcv = m_server->receives();
        if (rcv == 0)
        {
            cout << "server receive null data " << endl;
            return LString();
        }
        else if (rcv == -1)
        {
            cout << "server receive -1 " << endl;
            return LString();
        }
        else
        {
            // 获取接收的数据
            m_msg = m_server->pData->bytebuffer;
            cout << "server_recevice_message: " << m_msg << endl;
            return m_msg;
        }
    }
    bool sendMessages(LString data, LHostAddress add, uint16_t port)
    {
        // 向客户端发送数据
        return m_server->sends(data, add, port);
    }
    bool close()
    {
        // 关闭客户端的连接
        return m_server->closes();
    }
};

// 创建tcpSocket客户端类
class ClientUdpSocket
{
public:
    LUdpSocket *m_client;
    LString m_msg;
    void createClient(LAbstractSocket::NetworkProtocol network, int buffer = 1024)
    {
        m_client = new LUdpSocket(network);
        m_client->setBufferSize(buffer);
    }
    bool bindAddress(LString ip, int port)
    {
        // 绑定服务端的套接字地址
        bool bind = m_client->binds(new LHostAddress(ip), port);
        cout << "client_bind: " << bind << endl;
        if (bind == false)
        {
            cout << "client failed to bind address!" << endl;
        }
        return bind;
    }
    bool sendMessages(LString data, LString ip, uint16_t port)
    {
        cout << " == start sending msgs to server! == " << endl;
        return m_client->sends(data, LHostAddress(ip), port);
    }
    LString receiveServer()
    {
        // 接收客户端的数据
        int rcv = m_client->receives();
        if (rcv == 0)
        {
            cout << "server receive null data " << endl;
            return LString();
        }
        else if (rcv == -1)
        {
            cout << "server receive -1 " << endl;
            return LString();
        }
        else
        {
            // 获取接收的数据
            m_msg = LString(m_client->pData->bytebuffer);
            cout << "server_recevice_message: " << m_msg << endl;
            return m_msg;
        }
    }
    bool close()
    {
        return m_client->closes(); // 关闭服务端的连接
    }
};